import {
  Update,
  Start,
  Command,
  Ctx,
  On,
  Message,
  Action,
  Hears,
  InjectBot,
} from 'nestjs-telegraf';
import { Context, Markup, Telegraf } from 'telegraf';
import { UserService } from '../user/user.service';
import { UserRole } from '../schemas/user.schema';
import { GroupService } from '../group/group.service';
import { RequisiteService } from '../requisite/requisite.service';
import { Inject, UseGuards } from '@nestjs/common';
import { OperatorGuard } from '../common/guards/operator.guard';
import { WithdrawService } from '../withdraw/withdraw.service';
import { Types } from 'mongoose';
import { Operation, OperationStatuses } from '../schemas/operation.schema';
import { OperationService } from '../operation/operation.service';
import { WithdrawStatuses } from '../schemas/withdraw.schema';
import { AdminGuard } from '../common/guards/admin.guard';
import { SessionAction } from '../common/consts/session-actions.const';
import { formatAccountNumber } from '../common/helpers/format-account';

@Update()
export class BotUpdate {
  constructor(
    private readonly userService: UserService,
    private readonly groupService: GroupService,
    private readonly requisiteService: RequisiteService,
    private readonly withdrawService: WithdrawService,
    private readonly operationService: OperationService,
    @InjectBot() private readonly bot: Telegraf<any>,
  ) {}

  @Command('start')
  async start(@Ctx() ctx: Context) {
    const user = await this.userService.findOrCreateUser({
      telegram_id: ctx.from.id,
      username: ctx.from.username,
      first_name: ctx.from.first_name,
    });

    await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.username || user.first_name}!`);
  }

  private getRoleMenu(role: UserRole) {
    const buttons = [];

    if (role === UserRole.ADMIN) {
      // buttons.push(
      //     Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', 'add_operator'),
      //     Markup.button.callback('–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É', 'create_group'),
      //     Markup.button.callback('–ë–∞–ª–∞–Ω—Å', 'balance'),
      // );
      // buttons.push(
      //   ['–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', '–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É'],
      //   ['–ë–∞–ª–∞–Ω—Å', '–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤'],
      // );
    }

    if (role === UserRole.OPERATOR) {
      // buttons.push(
      //     Markup.button.callback('–ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', 'my_requisites'),
      //     Markup.button.callback('–ë–∞–ª–∞–Ω—Å', 'balance'),
      // );
      // buttons.push(['–ú–æ–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', '–ë–∞–ª–∞–Ω—Å']);
    }

    return Markup.keyboard(buttons, { columns: 2 }).resize();
  }

  @On('new_chat_members')
  async handleGroupAdded(@Ctx() ctx: Context) {
    const botMember = ctx.message['new_chat_members']?.find(
      (m) => m.id === ctx.botInfo.id,
    );

    if (botMember && ctx.chat.type !== 'private') {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ
        const existingGroup = await this.groupService.findByTelegramId(
          ctx.chat.id,
        );
        if (existingGroup) {
          await ctx.reply('‚ÑπÔ∏è –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
          return;
        }

        const admin = await this.userService.getUserByTelegramId(ctx.from.id);

        if (admin.role !== UserRole.ADMIN) {
          await ctx.reply(
            '‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—ã!',
          );
          await ctx.leaveChat();
          return;
        }

        const group = await this.groupService.createOrUpdateGroup({
          telegram_group_id: ctx.chat.id,
          title: ctx.chat.title || `–ì—Ä—É–ø–ø–∞ ${ctx.chat.id}`,
          // created_by: admin._id,
        });

        await ctx.reply(`‚úÖ –ì—Ä—É–ø–ø–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!`);
      } catch (e) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${e.message}`);
        await ctx.leaveChat();
      }
    }
  }

  @On('photo')
  async handlePhoto(@Ctx() ctx: Context) {
    if (ctx.chat.type === 'private') {
      return this.handleWithdrawChecks(ctx);
    } else {
      return this.handleGroupCheckPhoto(ctx);
    }
  }

  @On('document')
  async handleDocument(@Ctx() ctx: Context) {
    const document = ctx.message['document'];
    if (!document) return;

    if (document.mime_type === 'application/pdf') {
      return this.handleGroupCheckDocument(ctx);
    } else {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª üìÑ');
    }
  }

  private async handleGroupCheckDocument(@Ctx() ctx: Context) {
    try {
      const document = ctx.message['document'];
      if (!document || document.mime_type !== 'application/pdf') {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —á–µ–∫–∞ üìÑ');
        return;
      }

      const group = await this.groupService.findByTelegramId(ctx.chat.id);
      if (!group) {
        await ctx.reply('–ì—Ä—É–ø–ø–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
        return;
      }

      const operators = await this.userService.findOperatorsByGroupId(
        group._id,
      );
      if (!operators || operators.length === 0) {
        await ctx.reply('–ù–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!');
        return;
      }

      const originalMessageId = ctx.message.message_id;
      const processingMessage = await ctx.reply('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF-—á–µ–∫–∞...', {
        reply_parameters: { message_id: originalMessageId },
      });

      for (const operator of operators) {
        const caption = `–ù–æ–≤—ã–π PDF-—á–µ–∫ –∏–∑ –≥—Ä—É–ø–ø—ã: ${group.title}`;

        // –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        const operation = await this.operationService.create({
          group_id: group._id,
          group_chat_id: ctx.chat.id,
          original_message_id: originalMessageId,
          group_message_id: processingMessage.message_id,
          operator_id: operator._id,
          document_file_id: document.file_id,
          status: OperationStatuses.PENDING,
        });

        await ctx.telegram.sendDocument(
          operator.telegram_id,
          document.file_id,
          {
            caption,
            reply_markup: Markup.inlineKeyboard([
              Markup.button.callback(
                '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                `select_req_${operation._id}`,
              ),
              Markup.button.callback(
                '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                `reject_check_${operation._id}`,
              ),
            ]).reply_markup,
          },
        );
      }
    } catch (e) {
      await ctx.reply(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF-—á–µ–∫–∞: ${e.message}`);
    }
  }

  private async handleWithdrawChecks(@Ctx() ctx: Context) {
    const session = ctx['session'];
    if (!session || session.action !== 'AWAITING_WITHDRAW_CHECKS') return;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫–∏ –≤ —Å–µ—Å—Å–∏–∏
    if (!session.checks) session.checks = [];

    const photo = ctx.message['photo'][ctx.message['photo'].length - 1];
    session.checks.push(photo.file_id);

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–æ 2 —á–µ–∫–∞
    if (session.checks.length === 2) {
      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
        const operator = await this.userService.findById(session.operatorId);
        const requisite = await this.requisiteService.findById(
          session.requisiteId,
        );

        const request = await this.withdrawService.create({
          operator: operator._id,
          target_type: 'OPERATOR',
          amount: session.withdrawAmount,
          requisite: requisite._id,
          status: WithdrawStatuses.PENDING,
        });

        const mediaGroup = session.checks.map((fileId) => ({
          type: 'photo',
          media: fileId,
        }));

        await this.notifyAdmins(request, operator, requisite, mediaGroup);

        await ctx.reply(
          '‚úÖ –ß–µ–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.',
        );
        ctx['session'] = null;
      } catch (e) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–æ–≤: ${e.message}`);
      }
    } else {
      await ctx.reply(`‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω (${session.checks.length}/2)`);
    }
  }

  private async handleGroupCheckPhoto(@Ctx() ctx: Context) {
    try {
      const group = await this.groupService.findByTelegramId(ctx.chat.id);
      if (!group) {
        await ctx.reply('–ì—Ä—É–ø–ø–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
        return;
      }

      const operators = await this.userService.findOperatorsByGroupId(
        group._id,
      );

      if (!operators || operators.length === 0) {
        await ctx.reply('–ù–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!');
        return;
      }

      const originalMessageId = ctx.message.message_id;

      const processingMessage = await ctx.reply('‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞...', {
        reply_parameters: {
          message_id: originalMessageId,
        },
      });

      const photo = ctx.message['photo'][ctx.message['photo'].length - 1];

      for (const operator of operators) {
        const caption = `–ù–æ–≤—ã–π —á–µ–∫ –∏–∑ –≥—Ä—É–ø–ø—ã: ${group.title}`;

        // –°–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        const operation = await this.operationService.create({
          group_id: group._id,
          group_chat_id: ctx.chat.id,
          original_message_id: originalMessageId,
          group_message_id: processingMessage.message_id,
          operator_id: operator._id,
          photo_file_id: photo.file_id,
          status: OperationStatuses.PENDING,
        });

        await ctx.telegram.sendPhoto(operator.telegram_id, photo.file_id, {
          caption,
          reply_markup: Markup.inlineKeyboard([
            Markup.button.callback(
              '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
              `select_req_${operation._id}`,
            ),
            Markup.button.callback(
              '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
              `reject_check_${operation._id}`,
            ),
          ]).reply_markup,
        });
      }
    } catch (e) {
      await ctx.reply(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞: ${e.message}`);
    }
  }

  @Action(/^select_req_(.+)$/)
  async handleSelectRequisite(
    @Ctx() ctx: Context & { match: RegExpExecArray },
  ) {
    try {
      const operationId = ctx.match[1];
      const operation = await this.operationService.findPendingOperationById(
        operationId,
      );

      if (!operation) {
        await ctx.answerCbQuery('–û–ø–µ—Ä–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const operator = await this.userService.findById(operation.operator_id);

      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
      const requisites =
        await this.requisiteService.getActiveRequisitesForOperator(
          operator._id,
        );

      if (!requisites || requisites.length === 0) {
        await ctx.editMessageReplyMarkup(undefined);
        await ctx.reply('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã');
        await ctx.answerCbQuery();
        return;
      }

      // –°–æ–∑–¥–∞—ë–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
      const keyboard = requisites.map((req) => [
        Markup.button.callback(
          `${req.name} (${formatAccountNumber(req.account_number, req.type)})`,
          `request_amount_${operationId}_${req._id}`,
        ),
      ]);

      // ‚¨áÔ∏è –ú–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ —É —Ç–æ–≥–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      await ctx.editMessageReplyMarkup({
        inline_keyboard: keyboard,
      });

      await ctx.answerCbQuery();
    } catch (e) {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞');
      await ctx.reply(`–û—à–∏–±–∫–∞: ${e.message}`);
    }
  }

  @Action(/^request_amount_(.+)_(.+)$/)
  async requestAmount(@Ctx() ctx: Context & { match: RegExpExecArray }) {
    const operationId = ctx.match[1];
    const requisiteId = new Types.ObjectId(ctx.match[2]);

    try {
      const operation = await this.operationService.findPendingOperationById(
        operationId,
      );

      await this.operationService.update(operationId, {
        requisite_id: requisiteId,
      });

      ctx['session'] = {
        action: SessionAction.AwaitingCheckAmount,
        operationId,
        requisiteId,
        groupId: operation.group_id,
        groupChatId: operation.group_chat_id,
        groupMessageId: operation.group_message_id,
        originalMessageId: operation.original_message_id,
      };

      await ctx.answerCbQuery();
      await ctx.editMessageReplyMarkup(undefined);

      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:');
    } catch (e) {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏');
      await ctx.reply(`–û—à–∏–±–∫–∞: ${e.message}`);
    }
  }
  @Hears('üö´ –û—Ç–º–µ–Ω–∏—Ç—å')
  async cancelAmountInput(@Ctx() ctx: Context) {
    ctx['session'] = null;
    await ctx.reply('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ', Markup.removeKeyboard());
  }

  @Action(/^reject_check_(.+)$/)
  async rejectCheck(@Ctx() ctx: Context & { match: RegExpExecArray }) {
    const operationId = ctx.match[1];

    try {
      const operation = await this.operationService.findPendingOperationById(
        operationId,
      );
      if (!operation) {
        await ctx.answerCbQuery('–û–ø–µ—Ä–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      await ctx.telegram.editMessageText(
        operation.group_chat_id,
        operation.group_message_id,
        undefined,
        '‚ùå –ß–µ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω',
      );

      await ctx.telegram.setMessageReaction(
        operation.group_chat_id,
        operation.original_message_id,
        [
          {
            type: 'emoji',
            emoji: 'üëé',
          },
        ],
      );

      await this.operationService.reject(operationId);
      await ctx.answerCbQuery();
      await ctx.editMessageReplyMarkup(undefined);
      await ctx.telegram.setMessageReaction(
        ctx.chat.id,
        ctx.callbackQuery.message.message_id,
        [
          {
            type: 'emoji',
            emoji: 'üëé', // –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—Ä–µ—Å—Ç–∏–∫ –≤–º–µ—Å—Ç–æ üëé
          },
        ],
      );

      await ctx.reply('–ß–µ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω', {
        reply_parameters: {
          message_id: ctx.callbackQuery.message?.message_id,
        },
      });
    } catch (e) {
      await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —á–µ–∫–∞');
      await ctx.reply(`–û—à–∏–±–∫–∞: ${e.message}`);
    }
  }

  @UseGuards(OperatorGuard)
  @Command('my_requisites')
  async showMyRequisites(@Ctx() ctx: Context) {
    const operator = await this.userService.getUserByTelegramId(ctx.from.id);
    const requisites = await this.requisiteService.findByOperator(operator._id);

    let message = 'üìã –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n';
    requisites.forEach((req) => {
      message += `‚ñ´Ô∏è ${req.name} (${req.type})\n`;
      message += `${req.owner && req.owner} \n`;
      message += `–ù–æ–º–µ—Ä: ${formatAccountNumber(
        req.account_number,
        req.type,
      )}\n`;
      message += `–ë–∞–ª–∞–Ω—Å: ${req.balance}\n\n`;
    });

    await ctx.reply(message);
  }

  @UseGuards(OperatorGuard)
  @Command('my_balance')
  async showMyBalance(@Ctx() ctx: Context) {
    const operator = await this.userService.getUserByTelegramId(ctx.from.id);
    const balance = await this.userService.getOperatorBalance(operator._id);

    await ctx.reply(`üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance}`);
  }

  @UseGuards(AdminGuard)
  @Command('all_req')
  async listReq(@Ctx() ctx: Context) {
    const groups = await this.groupService.findAll();

    const buttons = groups.length
      ? groups.map((group) => [
          Markup.button.callback(
            `${group.title}`,
            `select_operators_${group._id}`,
          ),
        ])
      : [[Markup.button.callback('–ù–µ—Ç –≥—Ä—É–ø–ø', 'nooo')]];

    await ctx.reply('–í—ã–±–µ—Ä–µ—Ç–µ –≥—Ä—É–ø–ø—É:', Markup.inlineKeyboard(buttons));
  }

  @Action(/^select_operators_(.+)$/)
  async selectOperators(@Ctx() ctx: Context & { match: RegExpExecArray }) {
    const groupId = ctx.match[1];
    const operators = await this.userService.findOperatorsByGroupId(groupId);

    const buttons = operators.map((op) => [
      Markup.button.callback(op.username, `select_op_req_${op._id}`),
    ]);

    await ctx.editMessageText(
      '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:',
      Markup.inlineKeyboard(buttons),
    );
  }

  @Action(/^select_op_req_(.+)$/)
  async selectRequisite(@Ctx() ctx: Context & { match: RegExpExecArray }) {
    const operatorId = ctx.match[1];

    const operator = await this.userService.findById(
      new Types.ObjectId(operatorId),
    );
    const requisites = await this.requisiteService.findByIds(
      operator.requisites,
    );

    const buttons = requisites.map((req) => [
      Markup.button.callback(
        `${req.name} ${req.balance} ${req.is_active ? 'üü¢' : 'üî¥'}`,
        `toggle_req_${req._id}_op_${operatorId}`,
      ),
    ]);

    await ctx.editMessageText(
      '–†–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å):',
      Markup.inlineKeyboard(buttons),
    );
  }

  // @Action(/^toggle_req_(.+)_op_(.+)$/)
  // async toggleRequisite(@Ctx() ctx: Context & { match: RegExpExecArray }) {
  //   const requisiteId = ctx.match[1];
  //   const operatorId = ctx.match[2];
  //
  //   const requisite = await this.requisiteService.toggleActive(requisiteId);
  //
  //   // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–≤–æ–¥–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
  //   const operator = await this.userService.findById(
  //     new Types.ObjectId(operatorId),
  //   );
  //
  //   const requisites = await this.requisiteService.findByIds(
  //     operator.requisites,
  //   );
  //
  //   const buttons = requisites.map((req) => [
  //     Markup.button.callback(
  //       `${req.name} ${req.balance} ${req.is_active ? 'üü¢' : 'üî¥'}`,
  //       `toggle_req_${req._id}_op_${operatorId}`,
  //     ),
  //   ]);
  //
  //   await ctx.editMessageText(
  //     '–†–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å):',
  //     Markup.inlineKeyboard(buttons),
  //   );
  //
  //   const groups = await this.groupService.findByIds(operator.groups);
  //
  //   for (const group of groups) {
  //     const operators = await this.userService.findOperatorsByGroupId(
  //       group._id,
  //     );
  //
  //     let groupMessage = `üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ –≥—Ä—É–ø–ø–µ "${group.title}":\n`;
  //
  //     for (const operator of operators) {
  //       const requisites = await this.requisiteService.findByIds(
  //         operator.requisites || [],
  //       );
  //       const activeRequisites = requisites.filter((r) => r.is_active);
  //
  //       if (activeRequisites.length) {
  //         for (const req of activeRequisites) {
  //           groupMessage += `‚Ä¢ ${req.name} ${req.account_number} \n`;
  //         }
  //       }
  //     }
  //
  //     if (
  //       groupMessage.trim() ===
  //       `üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ –≥—Ä—É–ø–ø–µ "${group.title}":`
  //     ) {
  //       groupMessage += `\n‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.`;
  //     }
  //
  //     await ctx.telegram.sendMessage(group.telegram_group_id, groupMessage);
  //   }
  // }

  @Action(/^toggle_req_(.+)_op_(.+)$/)
  async toggleRequisite(@Ctx() ctx: Context & { match: RegExpExecArray }) {
    const requisiteId = ctx.match[1];
    const operatorId = ctx.match[2];

    await this.requisiteService.toggleActive(requisiteId);

    const operator = await this.userService.findById(
      new Types.ObjectId(operatorId),
    );
    const requisites = await this.requisiteService.findByIds(
      operator.requisites,
    );

    const buttons = requisites.map((req) => [
      Markup.button.callback(
        `${req.name} ${req.balance} ${req.is_active ? 'üü¢' : 'üî¥'}`,
        `toggle_req_${req._id}_op_${operatorId}`,
      ),
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
    buttons.push([
      Markup.button.callback(
        'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
        `save_requisites_op_${operatorId}`,
      ),
    ]);

    await ctx.editMessageText(
      '–†–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å):',
      Markup.inlineKeyboard(buttons),
    );
  }

  @Action(/^save_requisites_op_(.+)$/)
  async saveRequisites(@Ctx() ctx: Context & { match: RegExpExecArray }) {
    const operatorId = ctx.match[1];

    const operator = await this.userService.findById(
      new Types.ObjectId(operatorId),
    );
    const groupsData = await this.groupService.getGroupsWithActiveRequisites(
      operator.groups,
    );

    for (const group of groupsData) {
      let message = `üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ –≥—Ä—É–ø–ø–µ "${group.title}":\n`;

      for (const operator of group.operators) {
        if (operator.active_requisites.length > 0) {
          for (const req of operator.active_requisites) {
            message += `‚Ä¢ ${req?.owner || req.name} ${req.account_number}\n`;
            if (req.description) {
              message += `${req.description}\n`;
            }
          }
        }
      }

      if (
        message.trim() === `üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ –≥—Ä—É–ø–ø–µ "${group.title}":`
      ) {
        message += '\n‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.';
      }

      await ctx.telegram.sendMessage(group.telegram_group_id, message);
    }

    await ctx.answerCbQuery('–†–µ–∫–≤–∏–∑–∏—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—ã ‚úÖ');
  }

  @Command('withdraw_group_balance')
  async handleWithdrawGroupBalanceCommand(@Ctx() ctx: Context) {
    if (ctx.chat.type === 'private') {
      await ctx.reply('‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ!');
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
      const group = await this.groupService.findByTelegramId(ctx.chat.id);
      if (!group) {
        await ctx.reply('‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
      const userId = ctx.from.id;
      const isAdmin = await this.isUserGroupAdmin(ctx, userId);

      if (!isAdmin) {
        await ctx.reply(
          '‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞',
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
      if (group.balance <= 0) {
        await ctx.reply(
          '‚ùå –ë–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã —Ä–∞–≤–µ–Ω –Ω—É–ª—é –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π. –í—ã–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.',
        );
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å
      const user = await this.userService.findByTelegramId(userId);

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
      const request = await this.withdrawService.create({
        target_type: 'GROUP',
        amount: group.balance,
        status: WithdrawStatuses.PENDING,
        group: group._id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥—Ä—É–ø–ø—ã
      });

      const adminMessage = [
        `üö® –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –í–°–ï–ì–û –±–∞–ª–∞–Ω—Å–∞ –≥—Ä—É–ø–ø—ã!`,
        `üë• –ì—Ä—É–ø–ø–∞: ${group.title}`,
        `üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: @${user.username}`,
        `üí∞ –°—É–º–º–∞: ${group.balance}`,
        `üÜî ID –∑–∞–ø—Ä–æ—Å–∞: ${request._id}`,
      ].join('\n');

      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback(
            '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
            `approve_group_withdraw_${request._id}`,
          ),
          Markup.button.callback(
            '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
            `reject_group_withdraw_${request._id}`,
          ),
        ],
      ]);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∞–º
      const admins = await this.userService.getAdmins();
      await Promise.all(
        admins.map((admin) =>
          this.bot.telegram.sendMessage(admin.telegram_id, adminMessage, {
            reply_markup: keyboard.reply_markup,
          }),
        ),
      );

      await ctx.reply(
        `‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (${group.balance} ) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`,
        { reply_parameters: { message_id: ctx.message.message_id } },
      );
    } catch (e) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã
  private async isUserGroupAdmin(
    ctx: Context,
    userId: number,
  ): Promise<boolean> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã
      const administrators = await ctx.getChatAdministrators();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–µ–¥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
      return administrators.some((admin) => admin.user.id === userId);
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≥—Ä—É–ø–ø—ã:', e);
      return false;
    }
  }

  @Action(/^approve_group_withdraw_(.+)$/)
  async handleApproveGroupWithdraw(
    @Ctx() ctx: Context & { match: RegExpExecArray },
  ) {
    try {
      const requestId = ctx.match[1];
      const admin = await this.userService.findByTelegramId(ctx.from.id);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (!admin || admin.role !== UserRole.ADMIN) {
        await ctx.answerCbQuery('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
      const request = await this.withdrawService.findById(requestId);
      if (!request) {
        throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
      if (request.status !== WithdrawStatuses.PENDING) {
        await ctx.answerCbQuery('–û–ø–µ—Ä–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É
      const group = await this.groupService.findById(request.group);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      if (group.balance < request.amount) {
        throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –≥—Ä—É–ø–ø—ã');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã
      await this.groupService.updateBalance(group._id, -request.amount);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
      await this.withdrawService.approve(requestId, admin._id);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
      const initiator = await this.userService.findById(admin._id);
      await this.bot.telegram.sendMessage(
        initiator.telegram_id,
        `‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞ –≥—Ä—É–ø–ø—ã ${group.title} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n` +
          `üí∞ –°—É–º–º–∞: ${request.amount} \n` +
          `üÜî ID –∑–∞–ø—Ä–æ—Å–∞: ${request._id}`,
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await ctx.editMessageText(
        `‚úÖ –ó–∞–ø—Ä–æ—Å #${requestId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\n` +
          `üë• –ì—Ä—É–ø–ø–∞: ${group.title}\n` +
          `üí∞ –°—É–º–º–∞: ${request.amount} \n` +
          `üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: @${initiator.username}`,
      );

      await ctx.answerCbQuery('‚úÖ –í—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω');
    } catch (e) {
      await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
    }
  }

  @Action(/^reject_group_withdraw_(.+)$/)
  async handleRejectGroupWithdraw(
    @Ctx() ctx: Context & { match: RegExpExecArray },
  ) {
    try {
      const requestId = ctx.match[1];
      const admin = await this.userService.findByTelegramId(ctx.from.id);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (!admin || admin.role !== UserRole.ADMIN) {
        await ctx.answerCbQuery('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
        return;
      }

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
      const request = await this.withdrawService.findById(requestId);
      if (!request) {
        throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
      await this.withdrawService.reject(requestId, admin._id);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
      const initiator = await this.userService.findById(admin._id);
      const group = await this.groupService.findById(request.group);

      await this.bot.telegram.sendMessage(
        initiator.telegram_id,
        `‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ${request.amount}  –∏–∑ –≥—Ä—É–ø–ø—ã ${group.title} –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n` +
          `üÜî ID –∑–∞–ø—Ä–æ—Å–∞: ${request._id}`,
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await ctx.editMessageText(
        `‚ùå –ó–∞–ø—Ä–æ—Å #${requestId} –æ—Ç–∫–ª–æ–Ω–µ–Ω\n` +
          `üë• –ì—Ä—É–ø–ø–∞: ${group.title}\n` +
          `üí∞ –°—É–º–º–∞: ${request.amount} \n` +
          `üë§ –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: @${initiator.username}`,
      );

      await ctx.answerCbQuery('‚ùå –í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω');
    } catch (e) {
      console.log(e.message);
      await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
    }
  }

  // @Action(/^approve_withdraw_(.+)$/)
  // async handleApproveWithdraw(
  //   @Ctx() ctx: Context & { match: RegExpExecArray },
  // ) {
  //   try {
  //     await ctx.answerCbQuery();
  //     const admin = await this.userService.getUserByTelegramId(ctx.from.id);
  //
  //     const req = await this.withdrawService.findById(ctx.match[1]);
  //
  //     // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
  //     if (req.status !== 'PENDING') {
  //       await ctx.answerCbQuery('–û–ø–µ—Ä–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  //       return;
  //     }
  //
  //     if (!admin || admin.role !== UserRole.ADMIN) {
  //       await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
  //       return;
  //     }
  //
  //     const request = await this.withdrawService.approve(
  //       ctx.match[1],
  //       admin._id,
  //     );
  //
  //     const operator = await this.userService.findById(request.operator);
  //     const requisite = await this.requisiteService.findById(
  //       new Types.ObjectId(request.requisite),
  //     );
  //
  //     // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
  //     await this.requisiteService.updateBalance(
  //       request.requisite._id.toString(),
  //       -request.amount,
  //     );
  //
  //     // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
  //     await this.userService.updateBalance(
  //       request.operator._id.toString(),
  //       -request.amount,
  //     );
  //
  //     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
  //     await this.bot.telegram.sendMessage(
  //       operator.telegram_id,
  //       `‚úÖ –í–∞—à –≤—ã–≤–æ–¥ –Ω–∞ —Å—É–º–º—É ${request.amount} –æ–¥–æ–±—Ä–µ–Ω\n` +
  //         `–†–µ–∫–≤–∏–∑–∏—Ç: ${requisite.account_number}\n` +
  //         `–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${operator.balance - request.amount}`,
  //     );
  //
  //     // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
  //     await ctx.editMessageText(
  //       `‚úÖ –ó–∞–ø—Ä–æ—Å #${ctx.match[1]} –æ–¥–æ–±—Ä–µ–Ω\n` +
  //         `–°–ø–∏—Å–∞–Ω–æ: ${request.amount}\n` +
  //         `–†–µ–∫–≤–∏–∑–∏—Ç: ${requisite.name}`,
  //     );
  //   } catch (e) {
  //     console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', e);
  //     await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
  //   }
  // }

  @Action(/^reject_withdraw_(.+)$/)
  async handleRejectWithdraw(@Ctx() ctx: Context & { match: RegExpExecArray }) {
    try {
      await ctx.answerCbQuery();
      const admin = await this.userService.getUserByTelegramId(ctx.from.id);

      if (!admin || admin.role !== UserRole.ADMIN) {
        await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
        return;
      }

      const request = await this.withdrawService.findById(ctx.match[1]);

      if (request.status !== 'PENDING') {
        await ctx.answerCbQuery('–û–ø–µ—Ä–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }

      const updatedRequest = await this.withdrawService.reject(
        ctx.match[1],
        admin._id.toString(),
      );

      const operator = await this.userService.findById(request.operator);

      await this.bot.telegram.sendMessage(
        operator.telegram_id,
        `‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ ${request.amount}  –æ—Ç–∫–ª–æ–Ω–µ–Ω`,
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
      await ctx.editMessageText(`‚ùå –ó–∞–ø—Ä–æ—Å #${ctx.match[1]} –æ—Ç–∫–ª–æ–Ω–µ–Ω`, {
        reply_markup: { inline_keyboard: [] },
      });
    } catch (e) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', e);
      await ctx.answerCbQuery(`‚ùå ${e.message}`);
    }
  }

  @Command('pending')
  async handlePendingCommand(@Ctx() ctx: Context) {
    if (ctx.chat.type !== 'private') return;

    try {
      const operatorTelegramId = ctx.from.id;
      const operator = await this.userService.findByTelegramId(
        operatorTelegramId,
      );
      const pendingOperations = await this.operationService.findPending(
        operator._id,
      );

      if (pendingOperations.length === 0) {
        await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–µ–∫–æ–≤');
        return;
      }

      const buttons = pendingOperations.map((op) => [
        Markup.button.callback(
          `–û—Ç–∫—Ä—ã—Ç—å —á–µ–∫ #${op._id}`,
          `open_check_${op._id}`,
        ),
      ]);

      await ctx.reply(
        'üìã –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–µ–∫–∏:',
        Markup.inlineKeyboard(buttons),
      );
    } catch (e) {
      await ctx.reply(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–µ–∫–æ–≤: ${e.message}`);
    }
  }

  @Action(/open_check_(.+)/)
  async handleOpenCheck(@Ctx() ctx: Context & { match: any }) {
    const operationId = ctx.match[1];

    const operation = await this.operationService.findById(operationId);

    if (!operation) {
      await ctx.answerCbQuery('–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    const caption = `üßæ –ß–µ–∫ #${operation._id}\n –î–∞—Ç–∞: ${new Date(
      operation.created_at,
    ).toLocaleString()}`;

    if (operation?.document_file_id) {
      await ctx.replyWithDocument(operation.document_file_id, {
        caption,
        reply_markup: Markup.inlineKeyboard([
          Markup.button.callback('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `select_req_${operation._id}`),
          Markup.button.callback('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_check_${operation._id}`),
        ]).reply_markup,
      });
      return;
    }

    await ctx.replyWithPhoto(operation.photo_file_id, {
      caption,
      reply_markup: Markup.inlineKeyboard([
        Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `select_req_${operation._id}`),
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', `reject_check_${operation._id}`),
      ]).reply_markup,
    });

    await ctx.answerCbQuery();
  }

  private async notifyAdmins(
    request: any,
    operator: any,
    requisite: any,
    mediaGroup: any,
  ) {
    const admins = await this.userService.getAdmins();

    const message = [
      `üö® –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!`,
      `–û–ø–µ—Ä–∞—Ç–æ—Ä: @${operator.username}`,
      `–°—É–º–º–∞: ${request.amount}`,
      `–†–µ–∫–≤–∏–∑–∏—Ç: ${requisite.name}`,
      `ID: ${request._id}`,
    ].join('\n');

    const confirmData = `CONFIRM_ADMIN_WITHDRAW_${request._id}`;
    const rejectData = `reject_withdraw_${request._id}`;

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', confirmData),
        Markup.button.callback('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', rejectData),
      ],
    ]).reply_markup;

    await Promise.all(
      admins.map(async (admin) => {
        try {
          await this.bot.telegram.sendMediaGroup(admin.telegram_id, mediaGroup);

          await this.bot.telegram.sendMessage(admin.telegram_id, message, {
            reply_markup: keyboard,
          });
        } catch (e) {
          console.error(
            `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ${admin.telegram_id}:`,
            e.message,
          );
        }
      }),
    );
  }

  @Action(/^CONFIRM_ADMIN_WITHDRAW_(.+)$/)
  async handleConfirmWithdraw(
    @Ctx() ctx: Context & { match: RegExpExecArray },
  ) {
    const [withdrawId] = ctx.match.slice(1);

    const withdraw = await this.withdrawService.findById(withdrawId);

    if (withdraw.status === WithdrawStatuses.APPROVED) {
      await ctx.answerCbQuery('–û–ø–µ—Ä–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    ctx['session'] = {
      action: SessionAction.AdminConfirmWithdraw,
      withdrawId,
      operatorId: withdraw.operator,
      operatorRequisiteId: withdraw.requisite,
    };

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USDT:');
  }

  @On('text')
  async handleText(@Ctx() ctx: Context, next: () => Promise<void>) {
    if (!('text' in ctx.message)) return next();
    if (ctx.updateType === 'callback_query') return next();

    const session = ctx['session'];

    if (session?.creatingRequisite) {
      const type = session.creatingRequisite.type;
      const text = ctx.message.text.trim();

      try {
        if (type === 'card') {
          const parts = text.split(' ');
          const cardIndex = parts.findIndex((p) => /^\d{12,20}$/.test(p));

          if (cardIndex === -1 || cardIndex < 2) {
            await ctx.reply(
              '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏:\n<–ù–∞–∑–≤–∞–Ω–∏–µ> <–§–ò–û> <–ö–∞—Ä—Ç–∞> <–û–ø–∏—Å–∞–Ω–∏–µ>',
            );
            return;
          }

          const name = parts[0];
          const owner = parts.slice(1, cardIndex).join(' ');
          const account_number = parts[cardIndex];
          const description = parts.slice(cardIndex + 1).join(' ') || null;

          await this.requisiteService.create({
            name,
            owner,
            account_number,
            description,
            type: session.creatingRequisite.type,
            is_active: false,
          });

          await ctx.reply('‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
          return;
        }

        if (type === 'wallet') {
          const parts = text.split(' ');
          if (parts.length < 2) {
            await ctx.reply(
              '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏:\n<–ù–∞–∑–≤–∞–Ω–∏–µ> <–ù–æ–º–µ—Ä_–∫–æ—à–µ–ª—å–∫–∞> <–û–ø–∏—Å–∞–Ω–∏–µ>',
            );
            return;
          }

          const name = parts[0];
          const account_number = parts[1];
          const description = parts.slice(2).join(' ') || null;

          await this.requisiteService.create({
            name,
            owner: null,
            account_number,
            description,
            type: session.creatingRequisite.type,
            is_active: false,
          });

          await ctx.reply('‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
          return;
        }
      } catch (e) {
        await ctx.reply(e.message);
      }
    }

    if (
      session?.action === SessionAction.AwaitingCheckAmount &&
      ctx.chat.type === 'private'
    ) {
      try {
        const amount = Number(ctx.message.text.replace(',', '.'));
        if (isNaN(amount) || amount <= 0) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞');
        }

        const { groupId, requisiteId, groupChatId, groupMessageId } = session;

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        const requisite = await this.requisiteService.findById(requisiteId);
        if (!requisite?.operator_id) {
          throw new Error('–†–µ–∫–≤–∏–∑–∏—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É');
        }

        await Promise.all([
          this.groupService.updateBalance(groupId, amount),
          this.requisiteService.updateBalance(requisiteId, amount),
        ]);

        await ctx.telegram.editMessageText(
          groupChatId,
          groupMessageId,
          undefined,
          `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞: ${amount}`,
        );
        await ctx.telegram.setMessageReaction(
          groupChatId,
          session.originalMessageId,
          [
            {
              type: 'emoji',
              emoji: 'üëç',
            },
          ],
        );

        await this.operationService.approve(session.operationId);

        await ctx.reply(
          `‚úÖ –ß–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ù–∞—á–∏—Å–ª–µ–Ω–æ: ${amount}`,
          Markup.removeKeyboard(),
        );
        ctx['session'] = null;
      } catch (e) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${e.message}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:`);
      }
      return;
    }
    if (
      session?.action === SessionAction.AdminConfirmWithdraw &&
      ctx.chat.type === 'private'
    ) {
      try {
        const admin = await this.userService.getUserByTelegramId(ctx.from.id);
        if (!admin || admin.role !== UserRole.ADMIN) {
          await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤');
          return;
        }

        // 1. –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –≤ USD
        const rawUsdAmount = ctx.message.text.replace(',', '.');
        let usdAmount = parseFloat(rawUsdAmount);
        if (isNaN(usdAmount)) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ USD');
        }
        usdAmount = Math.round(usdAmount * 100) / 100;
        // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
        const withdrawId = session.withdrawId;
        const operatorId = session.operatorId;
        const operatorRequisiteId = session.operatorRequisiteId;

        // 3. –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
        const request = await this.withdrawService.findById(withdrawId);

        if (!request) {
          throw new Error('–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const updatedRequest = await this.withdrawService.approve(
          withdrawId,
          admin._id,
          usdAmount,
        );

        await this.requisiteService.decreaseRequisiteBalance(
          operatorRequisiteId,
          request.amount,
        );

        const operator = await this.userService.findById(operatorId);
        const requisite = await this.requisiteService.findById(
          operatorRequisiteId,
        );

        // 8. –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        await this.bot.telegram.sendMessage(
          operator.telegram_id,
          `‚úÖ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n` +
            `üì§ –°—É–º–º–∞: ${request.amount}\n` +
            `üí∏ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${usdAmount} USDT\n`,
        );

        // 9. –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await ctx.reply(`‚úÖ –í—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –û–ø–µ—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.`);

        // 10. –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        ctx['session'] = null;
      } catch (e) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${e.message}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:`);
      }
      return;
    }

    if (
      session?.action === SessionAction.WithdrawAmount &&
      ctx.chat.type === 'private'
    ) {
      try {
        const id = ctx.from.id;
        const amount = Number(ctx.message['text']);

        if (isNaN(amount) || amount <= 0) {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞');
        }

        const operator = await this.userService.findByTelegramId(id);
        const requisite = await this.requisiteService.findById(
          session.requisiteId,
        );

        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        if (requisite.operator_id.toString() !== operator.id) {
          throw new Error('–†–µ–∫–≤–∏–∑–∏—Ç –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä—É');
        }
        if (requisite.balance < amount) {
          throw new Error(
            `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–æ—Å—Ç—É–ø–Ω–æ: ${requisite.balance}`,
          );
        }

        // ===== –ù–û–í–´–ô –ö–û–î: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏–ø—Ç–æ-—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ =====
        // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏–ø—Ç–æ-—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–∑ –±–∞–∑—ã
        const cryptoRequisites =
          await this.requisiteService.getCryptoRequisites();

        if (cryptoRequisites.length === 0) {
          throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ-—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤');
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
        let message = `–î–ª—è –≤—ã–≤–æ–¥–∞ ${amount}  –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞:\n\n`;
        cryptoRequisites.forEach((req, index) => {
          message += `–†–µ–∫–≤–∏–∑–∏—Ç ${index + 1}: ${req.account_number}\n`;
        });

        message += `\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏—à–ª–∏—Ç–µ 2 —á–µ–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!`;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —á–µ–∫–æ–≤
        ctx['session'] = {
          action: 'AWAITING_WITHDRAW_CHECKS',
          withdrawAmount: amount,
          cryptoRequisites: cryptoRequisites.map((r) => r.account_number),
          operatorId: operator._id,
          requisiteId: requisite._id,
          originalMessage: ctx.message.message_id + 1, // ID —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        await ctx.reply(message, {
          reply_markup: { remove_keyboard: true },
        });
        // ===== –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê =====
      } catch (e) {
        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${e.message}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:`);
      }

      return;
    }

    return next();
  }

  @On('message')
  async handleMigrate(@Ctx() ctx: Context) {
    const message: any = ctx.message;

    if (message?.migrate_to_chat_id) {
      const oldChatId = message.chat.id;
      const newChatId = message.migrate_to_chat_id;

      await this.groupService.updateChatId(oldChatId, newChatId);

      await ctx.reply(
        `–ì—Ä—É–ø–ø–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã. –û–±–Ω–æ–≤–∏–ª chatId: ${newChatId}`,
      );
    }
  }
}
