import { Action, Command, Ctx, Message, Update } from 'nestjs-telegraf';
import { UserRole } from 'src/schemas/user.schema';
import { UserService } from 'src/user/user.service';
import { Context, Markup } from 'telegraf';
import { UseGuards } from '@nestjs/common';
import { AdminGuard } from '../common/guards/admin.guard';
import { Types } from 'mongoose';
import { RequisiteService } from '../requisite/requisite.service';
import { WithdrawService } from '../withdraw/withdraw.service';
import { SessionAction } from '../common/consts/session-actions.const';
import { formatAccountNumber } from '../common/helpers/format-account';

@Update()
export class OperatorUpdate {
  constructor(
    private readonly userService: UserService,
    private readonly requisitesService: RequisiteService,
    private readonly withdrawService: WithdrawService,
  ) {}

  @UseGuards(AdminGuard)
  @Command('operators')
  async operatorsMenu(@Ctx() ctx: Context) {
    await ctx.reply(
      'üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏:',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å', 'add_operator')],
        [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å', 'operator_remove')],
        [Markup.button.callback('üìã –°–ø–∏—Å–æ–∫', 'operator_list')],
      ]),
    );
  }

  @UseGuards(AdminGuard)
  @Action('add_operator')
  async addOperator(@Ctx() ctx: Context) {
    // const admin = await this.userService.getUserByTelegramId(ctx.from.id);
    //
    // if (admin.role !== UserRole.ADMIN) {
    //   return ctx.reply('üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
    // }

    const users = await this.userService.findAllUsers();

    const buttons = users.length
      ? users.map((user) => [
          Markup.button.callback(
            `${user.first_name || '–ë–µ–∑ –∏–º–µ–Ω–∏'} (${user.telegram_id})`,
            `make_operator:${user.telegram_id}`,
          ),
        ])
      : [[Markup.button.callback('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'noop')]];

    try {
      await ctx.editMessageText(
        'üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:',
        Markup.inlineKeyboard(buttons),
      );
    } catch (e) {
      return ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
    }
  }

  @UseGuards(AdminGuard)
  @Action(/make_operator:(\d+)/)
  async makeOperator(@Ctx() ctx: Context) {
    // const admin = await this.userService.getUserByTelegramId(ctx.from.id);
    //
    // if (admin.role !== UserRole.ADMIN) {
    //   return ctx.reply('üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
    // }

    const match = ctx['match'] as RegExpMatchArray;
    const telegramId = parseInt(match[1]);

    try {
      const user = await this.userService.updateUserRole(
        telegramId,
        UserRole.OPERATOR,
      );
      const username = typeof user.username === 'string' ? user.username : null;
      await ctx.editMessageText(
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${
          username ? '@' + username : user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        } —Ç–µ–ø–µ—Ä—å –æ–ø–µ—Ä–∞—Ç–æ—Ä!`,
      );
    } catch (e) {
      return ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
    }
  }

  @UseGuards(AdminGuard)
  @Action('operator_remove')
  async removeOperatorMenu(@Ctx() ctx: Context) {
    const operators = await this.userService.getAllOperators();

    const buttons = operators.map((op) => [
      Markup.button.callback(
        `‚ùå ${op.username}`,
        `operator_remove_${op.telegram_id}`,
      ),
    ]);

    await ctx.editMessageText(
      '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
      Markup.inlineKeyboard(buttons),
    );
  }

  @UseGuards(AdminGuard)
  @Action(/^operator_remove_(\d+)$/)
  async removeOperatorAction(@Ctx() ctx: Context) {
    const match = ctx['match'] as RegExpMatchArray;
    const telegramId = parseInt(match[1]);
    const user = await this.userService.updateUserRole(
      telegramId,
      UserRole.USER,
    );

    await ctx.editMessageText(`‚úÖ @${user.username} –±–æ–ª—å—à–µ –Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä!`);
  }

  @UseGuards(AdminGuard)
  @Action('operator_list')
  async listOperators(@Ctx() ctx: Context) {
    const operators = await this.userService.getAllOperators();

    const message = operators.length
      ? operators
          .map((op) => `üë§ ${op.username} (ID: ${op.telegram_id})`)
          .join('\n')
      : '–ù–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.';

    await ctx.editMessageText(`üìã –û–ø–µ—Ä–∞—Ç–æ—Ä—ã:\n\n${message}`);
  }

  @Command('withdraw')
  async handleWithdrawCommand(@Ctx() ctx: Context) {
    try {
      const operator = await this.userService.getUserByTelegramId(ctx.from.id);
      const requisites = await this.requisitesService.findByOperator(
        operator._id,
      );

      if (requisites.length === 0) {
        return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤');
      }

      const keyboard = requisites.map((req) => [
        Markup.button.callback(
          `${req.name} ${formatAccountNumber(req.account_number, req.type)} (${
            req.type
          })`,
          `op_withdraw_${req._id}`,
        ),
      ]);

      await ctx.reply(
        'üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞:',
        Markup.inlineKeyboard(keyboard),
      );
    } catch (e) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
    }
  }

  @Action(/^op_withdraw_(.+)$/)
  async handleWithdrawRequisite(
    @Ctx() ctx: Context & { match: RegExpExecArray },
  ) {
    try {
      const requisiteId = ctx.match[1];
      const operator = await this.userService.findByTelegramId(ctx.from.id);
      const requisite = await this.requisitesService.findById(requisiteId);

      // –ü—Ä–æ–≤–µ—Ä–∫–∏
      if (requisite.operator_id.toString() !== operator.id) {
        await ctx.reply('‚ùå –≠—Ç–æ—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
      if (requisite.balance <= 0) {
        await ctx.reply('‚ùå –ë–∞–ª–∞–Ω—Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ —Ä–∞–≤–µ–Ω –Ω—É–ª—é. –í—ã–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.');
        return;
      }

      // ===== –£–ë–†–ê–ù –í–í–û–î –°–£–ú–ú–´ - –°–†–ê–ó–£ –ü–ï–†–ï–•–û–î–ò–ú –ö –í–´–í–û–î–£ =====
      // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏–ø—Ç–æ-—Ä–µ–∫–≤–∏–∑–∏—Ç—ã
      const cryptoRequisites =
        await this.requisitesService.getCryptoRequisites();
      if (cryptoRequisites.length === 0) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ-—Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤');
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏
      let message = `–î–ª—è –≤—ã–≤–æ–¥–∞ –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (${requisite.balance}) –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞:\n\n`;
      cryptoRequisites.forEach((req, index) => {
        message += `–†–µ–∫–≤–∏–∑–∏—Ç ${index + 1}: ${req.account_number}\n`;
      });

      message += `\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏—à–ª–∏—Ç–µ 2 —á–µ–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`;
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —á–µ–∫–æ–≤

      ctx['session'] = {
        action: SessionAction.AwaitingWithdrawChecks,
        withdrawAmount: requisite.balance, // –í–µ—Å—å –±–∞–ª–∞–Ω—Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞
        cryptoRequisites: cryptoRequisites.map((r) => r.account_number),
        operatorId: operator._id,
        requisiteId: requisite._id,
        // originalMessage: orignalMessage.message_id + 1, // ID —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
      await ctx.reply(message, {
        reply_markup: { remove_keyboard: true },
      });
      // ===== –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô =====

      await ctx.answerCbQuery();
    } catch (e) {
      console.log(e);
      await ctx.answerCbQuery(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
    }
  }
  private async checkAdmin(ctx: Context): Promise<boolean> {
    const user = await this.userService.getUserByTelegramId(ctx.from.id);

    if (user.role !== UserRole.ADMIN) {
      await ctx.reply('üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!');
      return false;
    }
    return true;
  }
}
