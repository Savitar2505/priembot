import {
  Action,
  Command,
  Ctx,
  Hears,
  Message,
  On,
  Update,
} from 'nestjs-telegraf';
import { UserRole } from 'src/schemas/user.schema';
import { UserService } from 'src/user/user.service';
import { Context, Markup } from 'telegraf';
import { GroupService } from '../group/group.service';
import { RequisiteService } from '../requisite/requisite.service';
import { UseGuards } from '@nestjs/common';
import { AdminGuard } from '../common/guards/admin.guard';
import { Types } from 'mongoose';

@Update()
export class GroupUpdate {
  constructor(
    private groupService: GroupService,
    private userService: UserService,
    private requisiteService: RequisiteService,
  ) {}

  @UseGuards(AdminGuard)
  @Command('all_groups')
  async listGroups(@Ctx() ctx: Context) {
    const groups = await this.groupService.getAllGroups();

    const buttons = groups.map((group) => [
      Markup.button.callback(
        group.title,
        `group_action_${group.telegram_group_id}`,
      ),
    ]);

    await ctx.reply('üìÇ –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:', Markup.inlineKeyboard(buttons));
  }

  @UseGuards(AdminGuard)
  @Action(/^group_action_(.+)$/)
  async groupActionsMenu(@Ctx() ctx: Context & { match: RegExpExecArray }) {
    const groupId = ctx.match[1];
    const group = await this.groupService.findByTelegramId(parseInt(groupId));

    const buttons = [
      [
        Markup.button.callback(
          '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ',
          `rename_group_${groupId}`,
        ),
      ],
      [
        Markup.button.callback(
          'üë• –ü—Ä–∏–≤—è–∑–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞',
          `bind_operator_${groupId}`,
        ),
      ],
    ];

    await ctx.editMessageText(
      `‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π: ${group.title}\n` +
        // `–†–µ–∫–≤–∏–∑–∏—Ç—ã: ${group.requisite_ids.length}\n` +
        `–û–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: ${group.operator_ids.length}`,
      Markup.inlineKeyboard(buttons),
    );
  }

  @Command('group_balance')
  async handleBalanceCommand(@Ctx() ctx: Context) {
    if (ctx.chat.type === 'private') {
      return ctx.reply('‚ÑπÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö');
    }

    try {
      const group = await this.groupService.getGroupBalance(
        ctx.chat.id.toString(),
      );

      if (!group) {
        return ctx.reply('‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');
      }

      const message = `üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã: ${group.balance}\n`;

      await ctx.reply(message);
    } catch (e) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
    }
  }

  @UseGuards(AdminGuard)
  @Command('reset_balance')
  async handleResetBalance(@Ctx() ctx: Context) {
    try {
      if (ctx.chat.type === 'private') {
        return ctx.reply('‚ÑπÔ∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö');
      }

      const group = await this.groupService.resetGroupBalance(
        ctx.chat.id.toString(),
      );

      await ctx.reply(`‚úÖ –ë–∞–ª–∞–Ω—Å –≥—Ä—É–ø–ø—ã –æ–±–Ω—É–ª–µ–Ω\n` + `–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: 0 \n`);
    } catch (e) {
      await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
    }
  }

  @UseGuards(AdminGuard)
  @Action(/^bind_requisite_(.+)$/)
  async bindRequisiteToGroup(@Ctx() ctx: Context & { match: RegExpExecArray }) {
    const groupId = ctx.match[1];
    const requisites = await this.requisiteService.getAvailableRequisites();

    const buttons = requisites.length
      ? requisites.map((req) => [
          Markup.button.callback(
            `${req.name} (${req.type})`,
            `select_requisite_${groupId}_${req._id}`,
          ),
        ])
      : [[Markup.button.callback('–ù–µ—Ç –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤', 'noop')]];

    await ctx.editMessageText(
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:',
      Markup.inlineKeyboard(buttons),
    );
  }

  @UseGuards(AdminGuard)
  @Action(/^select_requisite_(.+)_(.+)$/)
  async processRequisiteSelection(
    @Ctx() ctx: Context & { match: RegExpExecArray },
  ) {
    const [_, telegramGroupId, requisiteId] = ctx.match;

    try {
      const groupId = await this.groupService.findByTelegramId(
        parseInt(telegramGroupId),
      );
      await this.groupService.addRequisiteToGroup(telegramGroupId, requisiteId);
      await this.requisiteService.addRequisiteToGroup(groupId._id, requisiteId);
      await ctx.editMessageText('‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!');
    } catch (e) {
      await ctx.editMessageText(`‚ùå –û—à–∏–±–∫–∞: ${e.message}`);
    }
  }

  @UseGuards(AdminGuard)
  @Action(/^rename_group_(.+)$/)
  async renameGroup(@Ctx() ctx: Context & { match: RegExpExecArray }) {
    const groupId = ctx.match[1];
    ctx['session'] = { action: 'renaming_group', groupId };

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:', Markup.removeKeyboard());
  }

  @UseGuards(AdminGuard)
  @Action(/^bind_operator_(.+)$/)
  async bindOperatorToGroup(@Ctx() ctx: Context & { match: RegExpExecArray }) {
    const groupId = ctx.match[1];

    const group = await this.groupService.findByTelegramId(groupId);
    const operators = await this.userService.getOperatorsWithGroupBinding(
      group._id,
    );

    const buttons = operators.map((op) => {
      const status = op.isBound ? 'üîó' : '‚ùå';
      return [
        Markup.button.callback(
          `${op.username} ${status}`,
          `select_operator_${groupId}_${op._id}`,
        ),
      ];
    });

    await ctx.editMessageText(
      '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:',
      Markup.inlineKeyboard(buttons),
    );
  }

  @UseGuards(AdminGuard)
  @Action(/^select_operator_(.+)_(.+)$/)
  async processOperatorSelection(
    @Ctx() ctx: Context & { match: RegExpExecArray },
  ) {
    const [_, telegramGroupId, operatorId] = ctx.match;

    const group = await this.groupService.findByTelegramId(telegramGroupId);

    const isBound = await this.userService.isOperatorBoundToGroup(
      operatorId,
      group._id,
    );

    if (isBound) {
      await this.groupService.removeOperatorFromGroup(
        telegramGroupId,
        operatorId,
      );
      await this.userService.unbindOperatorFromGroup(group._id, operatorId);
      await ctx.editMessageText('‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –≥—Ä—É–ø–ø—ã.');
    } else {
      await this.groupService.addOperatorToGroup(telegramGroupId, operatorId);
      await this.userService.bindOperatorToGroup(group._id, operatorId);
      await ctx.editMessageText('‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≥—Ä—É–ø–ø–µ.');
    }
  }
}
